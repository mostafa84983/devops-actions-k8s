name: CI/CD to Kubernetes

on:
  push:
    branches:
      - master

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to ECR
      run: |
        IMAGE_TAG=${GITHUB_SHA::7}   # short commit hash
        ECR_REPO=${{ secrets.ECR_REPOSITORY }}
        docker build -t $ECR_REPO:$IMAGE_TAG ./app
        docker push $ECR_REPO:$IMAGE_TAG
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Update Kubernetes manifests
      run: |
        sed -i "s|image: .*|image: ${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}|" k8s/deployment.yaml
        echo "Updated deployment image to ${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
    - name: kubeconfig Configuration
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Create Kubernetes namespace
      run: |
        kubectl apply -f k8s/namespace.yaml
        

    - name: Create Kubernetes ECR pull secret
      run: |
        kubectl delete secret ecr-secret -n demo --ignore-not-found
        kubectl create secret docker-registry ecr-secret \
          --docker-server=${{ secrets.ECR_REPOSITORY }} \
          --docker-username=AWS \
          --docker-password=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) \
          -n demo
    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f k8s/deployment.yaml -n demo
        kubectl apply -f k8s/service.yaml -n demo
        kubectl rollout status deployment/flask-app -n demo
        kubectl get all -n demo
    - name: Cleanup old ReplicaSets
      run: |
        # Keep only the last 2 ReplicaSets for each deployment
        for deploy in $(kubectl get deploy -n demo -o jsonpath='{.items[*].metadata.name}'); do
          kubectl get rs -n demo \
            --selector=app=$deploy \
            --sort-by=.metadata.creationTimestamp \
            -o jsonpath='{.items[*].metadata.name}' | \
          awk '{for (i=1; i<=NF-2; i++) print $i}' | \
          xargs -r kubectl delete rs -n demo || true
        done